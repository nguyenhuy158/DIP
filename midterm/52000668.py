# -*- coding: utf-8 -*-
"""dip midterm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IsdnIOAIzgFkTKCV0K_PGDM3j-MgCjNv
"""

# CONVERT COLOR

import cv2
import numpy as np

r = 255
g = 255
b = 255
greenBGR = np.uint8([[[b, g, r]]])

hsv_green = cv2.cvtColor(greenBGR, cv2.COLOR_BGR2HSV)
(B, G, R) = cv2.split(hsv_green)
print("[", B[0][0], ",", G[0][0], ",", R[0][0], "]")

"""# a Done

"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
from google.colab import drive
drive.mount("/content/drive")


path = "/content/drive/My Drive/input1.jpg"

img = cv2.imread(path)
# cv2_imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

hsvImage = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

lower = np.array([17, 149, 0])
upper = np.array([33, 255, 255])
yellowMask = cv2.inRange(hsvImage, lower, upper)
yellowStar = cv2.bitwise_and(img, img, mask=yellowMask)

lower = np.array([0, 149, 0])
upper = np.array([20, 255, 255])
orangeMask = cv2.inRange(hsvImage, lower, upper)
orangeStar = cv2.bitwise_and(img, img, mask=orangeMask)

lower = np.array([150, 149, 0])
upper = np.array([179, 255, 255])
pinkMask = cv2.inRange(hsvImage, lower, upper)
pinkStar = cv2.bitwise_and(img, img, mask=pinkMask)

lower = np.array([88, 190, 0])
upper = np.array([110, 255, 255])
blueMask = cv2.inRange(hsvImage, lower, upper)
blueStar = cv2.bitwise_and(img, img, mask=blueMask)

lower = np.array([63, 149, 0])
upper = np.array([88, 255, 255])
greenMask = cv2.inRange(hsvImage, lower, upper)
greenStar = cv2.bitwise_and(img, img, mask=greenMask)

lower = np.array([127, 149, 0])
upper = np.array([160, 255, 255])
purpleMask = cv2.inRange(hsvImage, lower, upper)
purpleStar = cv2.bitwise_and(img, img, mask=purpleMask)

# save image
cv2.imwrite("a-yellowStar.png", yellowStar)
cv2.imwrite("a-orangeStar.png", orangeStar)
cv2.imwrite("a-pinkStar.png", pinkStar)
cv2.imwrite("a-blueStar.png", blueStar)
cv2.imwrite("a-greenStar.png", greenStar)
cv2.imwrite("a-purpleStar.png", purpleStar)

joinImage = cv2.bitwise_or(yellowStar, orangeStar)
joinImage = cv2.bitwise_or(joinImage, pinkStar)
joinImage = cv2.bitwise_or(joinImage, blueStar)
joinImage = cv2.bitwise_or(joinImage, greenStar)
joinImage = cv2.bitwise_or(joinImage, purpleStar)
# cv2_imshow(joinImage)

"""# b Done"""

backupImg = img.copy()
img[yellowMask > 0] = (0, 255, 0)
yellowStar = img.copy()
img = backupImg.copy()

img[orangeMask > 0] = (0, 255, 0)
orangeStar = img.copy()
img = backupImg.copy()

img[pinkMask > 0] = (0, 255, 0)
pinkStar = img.copy()
img = backupImg.copy()

img[blueMask > 0] = (0, 255, 0)
blueStar = img.copy()
img = backupImg.copy()

img[greenMask > 0] = (0, 255, 0)
greenStar = img.copy()
img = backupImg.copy()

img[purpleMask > 0] = (0, 255, 0)
purpleStar = img.copy()
img = backupImg.copy()

cv2.imwrite("b-yellowStar.png", yellowStar)
cv2.imwrite("b-orangeStar.png", orangeStar)
cv2.imwrite("b-pinkStar.png", pinkStar)
cv2.imwrite("b-blueStar.png", blueStar)
cv2.imwrite("b-greenStar.png", greenStar)
cv2.imwrite("b-purpleStar.png", purpleStar)

# cv2_imshow(yellowStar)
# cv2_imshow(orangeStar)
# cv2_imshow(pinkStar)
# cv2_imshow(blueStar)
# cv2_imshow(greenStar)
# cv2_imshow(purpleStar)

"""# c Done

"""

img = backupImg.copy()
img[yellowMask > 0] = (0, 255, 0)
img[orangeMask > 0] = (0, 255, 0)
img[pinkMask > 0] = (0, 255, 0)
img[blueMask > 0] = (0, 255, 0)
img[greenMask > 0] = (0, 255, 0)
img[purpleMask > 0] = (0, 255, 0)
greenStars = img.copy()
img = backupImg.copy()

cv2.imwrite("c-greenStars.png", greenStars)

cv2_imshow(greenStars)

"""# d Done

"""

grayImg = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

lower = np.array([0, 70, 0])
upper = np.array([179, 255, 255])
borderMask = cv2.inRange(hsvImage, lower, upper)
borderMask = cv2.bitwise_not(borderMask)
grayImgWithBlackBorder = grayImg.copy()
grayImgWithBlackBorder[borderMask > 0] = 0
cv2.imwrite("d-grayImgWithBlackBorder.png", grayImgWithBlackBorder)
cv2_imshow(grayImgWithBlackBorder)

"""# e Done"""

lower = np.array([0, 160, 0])
upper = np.array([179, 255, 255])
starMask = cv2.inRange(hsvImage, lower, upper)
starMask = cv2.dilate(starMask, np.ones((5, 5), np.uint8), iterations=1)

starMask = cv2.bitwise_or(starMask, borderMask)
starMask = cv2.bitwise_not(starMask)
starMask[img.shape[0]-80:img.shape[0], 0:img.shape[1]] = 0

grayImgWithBlackBorder = grayImg.copy()
grayImgWithBlackBorder[starMask > 0] = 0
cv2.imwrite("e-grayImgWithBlackBorder.png", starMask)
# cv2_imshow(starMask)

"""#f Done"""

edged = cv2.Canny(grayImg, 30, 200)
contours, hierarchy = cv2.findContours(edged, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
startWithRedContours = img.copy()
cv2.drawContours(startWithRedContours, contours, -1, (0, 0, 255), 2)
cv2.imwrite('f-startWithRedContours.png', startWithRedContours)
cv2_imshow(startWithRedContours)

"""#g Done

"""

edged = cv2.Canny(grayImg, 30, 200)
ret,thresh = cv2.threshold(grayImg,200,255,cv2.THRESH_BINARY)
thresh = cv2.erode(thresh, np.ones((5, 5), np.uint8), iterations=2)

contours, hierarchy = cv2.findContours(
    thresh, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_SIMPLE
)
boxImg = img.copy()
print(len(contours))
for index in range(len(contours)):
    cnt = contours[index]
    x, y, w, h = cv2.boundingRect(cnt)
    if(w < 100 or h < 100):
      continue
    cv2.rectangle(boxImg, (x, y), (x + w, y + h), (0, 255, 0), 2)

cv2.imwrite('g-boxStarImg.png', boxImg)
cv2_imshow(boxImg)

"""#h Done

"""

gaussionNoiseImageWithStudentID = img.copy()

mean = 0
sigma = 150**0.5
gauss = np.random.normal(mean,sigma,img.shape)
gaussionNoiseImageWithStudentID = img + gauss
image = cv2.putText(gaussionNoiseImageWithStudentID, '52000668', (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA)
cv2.imwrite("h-gaussionNoiseImageWithStudentID.png", gaussionNoiseImageWithStudentID)
# cv2_imshow(gaussionNoiseImageWithStudentID)

"""# format code"""

!pip install black[jupyter]
!black /content/drive/MyDrive/Colab\ Notebooks/dip\ midterm.ipynb

!cp *.png /content/drive/MyDrive/png/

from google.colab import drive
drive.mount('/content/drive')