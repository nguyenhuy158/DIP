import cv2
import numpy as np

image = cv2.imread("lane.jpg")

cv2.imshow("result", image)
cv2.waitKey(0)


# step 1
lane_image = np.copy(image)  # creating copy of the image
gray = cv2.cvtColor(lane_image, cv2.COLOR_RGB2GRAY)  # converting to gray-scale
cv2.imshow("result", gray)  # to output gray-scale image
cv2.waitKey(0)

# step 2
blur = cv2.GaussianBlur(gray, (5, 5), 0)

cv2.imshow("result", blur)  # to output gaussian image.
cv2.waitKey(0)

# step 3
import cv2
import numpy as np


def canny(image):
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    canny = cv2.Canny(blur, 50, 150)
    return canny


canny_image = canny(image)
cv2.imshow("result", canny_image)
cv2.waitKey(0)


# step
def region_of_interest(image):
    height = image.shape[0]
    polygons = np.array([[(200, height), (1100, height), (550, 250)]])
    mask = np.zeros_like(image)
    cv2.fillPoly(mask, polygons, 255)
    return mask


mask = region_of_interest(canny_image)
cv2.imshow("result", mask)  # changing it to show ROI instead of canny image.
cv2.waitKey(0)


def cropped_image_by_mask(image, mask):
    masked_image = cv2.bitwise_and(image, mask)
    return masked_image


cropped_image = cropped_image_by_mask(canny_image, mask)
cv2.imshow("result", cropped_image)
cv2.waitKey(0)

# step
lines = cv2.HoughLinesP(
    cropped_image, 2, np.pi / 180, 100, np.array([]), minLineLength=40, maxLineGap=5
)


def display_lines(image, lines):
    line_image = np.zeros_like(image)
    if lines is not None:
        for line in lines:
            x1 = line[0][0]
            y1 = line[0][1]
            x2 = line[0][2]
            y2 = line[0][3]
            cv2.line(line_image, (x1, y1), (x2, y2), (255, 0, 0), 10)
    return line_image


line_image = display_lines(image, lines)
cv2.imshow("result", line_image)
cv2.waitKey(0)
combo_image = cv2.addWeighted(lane_image, 0.8, line_image, 1, 1)
cv2.imshow("result", combo_image)
cv2.waitKey(0)


# step
def make_coordinates(image, line_parameters):
    slope, intercept = line_parameters
    y1 = image.shape[0]
    y2 = int(y1 * (3 / 5))
    x1 = int((y1 - intercept) / slope)
    x2 = int((y2 - intercept) / slope)
    return np.array([x1, y1, x2, y2])

def average_slope_intercept(image, lines):
    left_fit = []
    right_fit = []
    for line in lines:
        x1, y1, x2, y2 = line.reshape(4)
        parameters = np.polyfit((x1, x2), (y1, y2), 1)
        slope = parameters[0]
        intercept = parameters[1]
        if slope < 0:
            left_fit.append((slope, intercept))
        else:
            right_fit.append((slope, intercept))
    left_fit_average = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    left_line = make_coordinates(image, left_fit_average)
    right_line = make_coordinates(image, right_fit_average)
    return np.array([left_line, right_line])